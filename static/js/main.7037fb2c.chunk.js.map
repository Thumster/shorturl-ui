{"version":3,"sources":["ShorturlApi.js","logo.png","copy.svg","App.js","reportWebVitals.js","index.js"],"names":["methods","ShorturlApi","createShorturl","url","reqBody","axios","post","headers","Response","response","message","type","link","Alert","className","variant","onClick","navigator","clipboard","writeText","src","copyIcon","alt","App","promiseInProgress","usePromiseTracker","alertTypes","isUrlOptions","protocols","require_tld","require_protocol","require_host","require_port","require_valid_protocol","allow_underscores","host_whitelist","host_blacklist","allow_trailing_dot","allow_protocol_relative_urls","disallow_auth","validate_length","useState","isUrlValid","setIsUrlValid","isUrlInvalid","setIsUrlInvalid","setResponse","urlValidator","validator","isURL","logo","Form","onSubmit","event","preventDefault","form","currentTarget","target","value","isFormValid","checkValidity","trackPromise","ShortUrlApi","then","resp","data","shortUrl","catch","err","errMsg","stopPropagation","noValidate","Label","Control","onChange","checkValid","isValid","isInvalid","placeholder","required","Feedback","Button","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7037fb2c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst api_url = \"http://shorturlservice-env.eba-umwheeti.ap-southeast-1.elasticbeanstalk.com\";\r\n\r\nconst methods = {\r\n    create: \"/create\",\r\n};\r\n\r\nconst ShorturlApi = {\r\n    createShorturl: (url) => {\r\n        const reqBody = {\r\n            'url': url,\r\n        };\r\n        return axios.post(\r\n            api_url + methods.create, reqBody, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default ShorturlApi;","export default __webpack_public_path__ + \"static/media/logo.a441df0c.png\";","export default __webpack_public_path__ + \"static/media/copy.9f9b3700.svg\";","import { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\nimport ShortUrlApi from './ShorturlApi';\nimport validator from 'validator';\nimport logo from './logo.png';\nimport copyIcon from './copy.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const { promiseInProgress } = usePromiseTracker();\n\n  const alertTypes = {\n    'success': 'success',\n    'error': 'danger',\n  };\n\n  const isUrlOptions = {\n    protocols: ['http', 'https', 'ftp'],\n    require_tld: true,\n    require_protocol: true,\n    require_host: true,\n    require_port: false,\n    require_valid_protocol: true,\n    allow_underscores: false,\n    host_whitelist: false,\n    host_blacklist: false,\n    allow_trailing_dot: false,\n    allow_protocol_relative_urls: false,\n    disallow_auth: false,\n    validate_length: true\n  };\n\n  const [isUrlValid, setIsUrlValid] = useState(false);\n  const [isUrlInvalid, setIsUrlInvalid] = useState(false);\n  const [response, setResponse] = useState(null);\n\n  const handleOnChange = (event) => {\n    event.preventDefault();\n    const checkValid = urlValidator(event.target.value);\n\n    setIsUrlValid(checkValid);\n    setIsUrlInvalid(!checkValid);\n  }\n\n  const urlValidator = (url) => {\n    const checkValidUrl = validator.isURL(url, isUrlOptions);\n    if (checkValidUrl) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setResponse(null);\n\n    const form = event.currentTarget;\n    const url = event.target[0]?.value;\n    const isFormValid = form.checkValidity() && urlValidator(url);\n\n    if (!isFormValid) {\n      event.stopPropagation();\n      setIsUrlInvalid(true);\n      setIsUrlValid(false);\n    } else {\n      if (isFormValid) {\n        trackPromise(\n          ShortUrlApi.createShorturl(url)\n            .then(resp => {\n              setResponse({\n                message: 'Successfully created Shorturl!',\n                link: resp.data.shortUrl,\n                type: alertTypes.success,\n              });\n              setIsUrlInvalid(false);\n              setIsUrlValid(false);\n            })\n            .catch(err => {\n              let errMsg;\n              if (!err.response) {\n                errMsg = 'Failed to connect to server!'\n              } else {\n                errMsg = 'Unsuccessful! \\n' + err.response?.data?.message;\n              }\n              setResponse({\n                message: errMsg,\n                type: alertTypes.error,\n              });\n            })\n        );\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"user-form-container\">\n          <h3>Shorturl</h3>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Form className=\"user-form\" onSubmit={handleSubmit} noValidate>\n            <Form.Label>Enter the URL to shorten</Form.Label>\n            <Form.Control\n              onChange={handleOnChange}\n              isValid={isUrlValid}\n              isInvalid={isUrlInvalid}\n              placeholder=\"https://example.com\"\n              required />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide a valid URL\n            </Form.Control.Feedback>\n            {response?.type && <Response response={response} />}\n            {promiseInProgress && <div><img src={logo} className=\"spinner-logo\" alt=\"logo\" /></div>}\n            <Button className=\"button-submit\" type=\"submit\">Generate Shorturl</Button>\n          </Form>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nconst Response = ({ response }) => {\n  const { message, type, link } = response;\n  const handleOnClick = () => {\n    if (link) {\n      navigator.clipboard.writeText(link);\n    }\n  }\n\n  return <Alert className=\"response\" variant={type} onClick={handleOnClick}>\n    <div className=\"response-body\">\n      <div className=\"text-container\">\n        {message}\n        {link && <><br />{link}</>}\n      </div>\n      <div className=\"copy-icon-container\">\n        <img className=\"copy-icon\" src={copyIcon} alt=\"copy\" />\n      </div>\n    </div>\n  </Alert>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}